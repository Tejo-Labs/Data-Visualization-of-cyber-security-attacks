install.packages("pacman")
library("pacman")
if (!require("pacman")) install.packages("pacman")
p_load(data.table, dplyr) # two modern packages to modify data objects in R
p_load(ggplot2, alluvial) # two packages to visualize data
d <- fread("C:\Users\gxt220010\Desktop\Godela_Tejodeep_Problem set-2/cyberattacks-across-the-globe-cases.csv")
d <- fread("C:/Users/gxt220010/Desktop/Godela_Tejodeep_Problem set-2/cyberattacks-across-the-globe-cases.csv")
d.attacks.by.year <- fread("C:\Users\gxt220010\Desktop\Godela_Tejodeep_Problem set-2/cyberattacks-by-year.csv")
d <- fread("C:/Users/gxt220010/Desktop/Godela_Tejodeep_Problem set-2/cyberattacks-across-the-globe-cases.csv")
d.attacks.by.year <- fread("C:/Users/gxt220010/Desktop/Godela_Tejodeep_Problem set-2/cyberattacks-by-year.csv")
d.attacks.by.year.and.method <- fread("C:/Users/gxt220010/Desktop/Godela_Tejodeep_Problem set-2/cyberattacks-by-year-and-method.csv")
d.attacks.by.attack_on <- fread("C:/Users/gxt220010/Desktop/Godela_Tejodeep_Problem set-2/cyberattacks-by-attack_on.csv" )
print(d)
print(names(d))
print(d)
glimpse(d)
str(d)
str(d)
summary(d)
d
print(d)#For whole data
print(names(d))#
print(d)#For whole data like head()
print(names(d))#only for column details
print(head(d))
source.countries <- unique(d$source)
# Print the vector containing source countries
print(source.countries)
target.countries <- sort(target.countries, decreasing = FALSE)
target.countries <- sort(target.countries, decreasing = FALSE)
target.countries <- unique(d$target)
target.countries
source.countries <- unique(d$source)
# Print the vector containing source countries
print(source.countries)
target.countries <- sort(target.countries, decreasing = FALSE)
target.countries
target.countries <- sort(target.countries, decreasing = TRUE)
target.countries
target.countries <- sort(target.countries, decreasing = FALSE)
target.countries
target.countries <- sort(target.countries, decreasing = FALSE)
target.countries
source.countries <- sort(source.countries, decreasing = TRUE)
source.countries <- sort(source.countries, decreasing = TRUE)
source.countries
source.countries <- unique(d$source)
# Print the vector containing source countries
source.countries
#Ascending order
target.countries <- sort(target.countries, decreasing = FALSE)
target.countries
#Desending order
target.countries <- sort(target.countries, decreasing = TRUE)
target.countries
#reverse alphabetic order
target.countries <- sort(target.countries, decreasing = FALSE)
target.countries
#reverse alphabetic order
target.countries <- sort(target.countries, decreasing = FALSE)
print(target.countries)
share <- length(target.source.intersection) / length(all.countries) * 100
source.countries <- sort(source.countries, decreasing = TRUE)
source.countries
share <- length(target.source.intersection) / length(all.countries) * 100
share <- length(target.source.intersection) / length(all.countries) * 100
source.countries <- sort(source.countries, decreasing = TRUE)
source.countries
target.source.intersection <- intersect(target.countries, source.countries)
all.countries <- unique(c(target.countries, source.countries))
share <- length(target.source.intersection) / length(all.countries) * 100
print(share)
# Create a vector containing countries present in both target.countries and source.countries
target.source.intersection <- intersect(target.countries, source.countries)
all.countries <- unique(c(target.countries, source.countries))
share <- length(target.source.intersection) / length(all.countries) * 100
# Print the share
share
table(d$target) # check the results without storing them in an object
target.by.frequency <- table(d$target) # store the results in an object
target.by.frequency # check what is inside this object
target.by.frequency.top.3 <- c("US", "S Korea", "India")
target.by.frequency.top.3
target.by.frequency.top.3 <- target.by.frequency[c(7,18,25)]
target.by.frequency.top.3
names(target.by.frequency.top.3)
target.by.frequency.top.3 <- names(target.by.frequency.top.3)
target.by.frequency.top.3
source.by.frequency <- table(d$source)
source.by.frequency.top.3 <- c("India", "S Korea", "US")
source.by.frequency.top.3
source.by.frequency <- table(d$source)
source.by.frequency.top.3 <- c("India", "S Korea", "US")
print(source.by.frequency.top.3)
source.by.frequency <- table(d$source)
source.by.frequency.top.3 <- c("India", "S Korea", "US")
print(source.by.frequency.top.3)
source.by.frequency <- table(d$source)
source.by.frequency.top.3 <- names(sort(source.by.frequency, decreasing = TRUE)[1:3])
print(source.by.frequency.top.3)
source.by.frequency <- table(d$source)
source.by.frequency.top.3 <- names(sort(source.by.frequency, decreasing = TRUE)[1:3])
source.by.frequency.top.3
source.by.frequency <- table(d$source)
source.by.frequency.top.3 <- names(sort(source.by.frequency, decreasing = TRUE)[1:3])
source.by.frequency.top.3
target.by.frequency <- table(d$target) # Obtain number of attacks for each territory
target.by.frequency <-  sort(target.by.frequency) # Sort the vector, if 'decreasing = TRUE' is not specified, it will automatically sort elements in increasing order (as if you explicitly specify 'decreasing = FALSE').
target.by.frequency.bottom.3 <- target.by.frequency[1:3] # Extract the first three elements
target.by.frequency.bottom.3 # check what is inside the object
target.by.frequency.bottom.3 <- names(target.by.frequency.bottom.3) # extract the names of the elements and re-write the object
target.by.frequency.bottom.3 # check what is inside the object again.
target.by.frequency <- table(d$target) # Obtain number of attacks for each territory
target.by.frequency <-  sort(target.by.frequency) # Sort the vector, if 'decreasing = TRUE' is not specified, it will automatically sort elements in increasing order (as if you explicitly specify 'decreasing = FALSE').
target.by.frequency.bottom.3 <- target.by.frequency[1:3] # Extract the first three elements
target.by.frequency.bottom.3 # check what is inside the object
'''{r}
target.by.frequency.bottom.3 <- names(target.by.frequency.bottom.3) # extract the names of the elements and re-write the object
target.by.frequency.bottom.3 # check what is inside the object again.
```
target.by.frequency.bottom.3 <- names(target.by.frequency.bottom.3) # extract the names of the elements and re-write the object
target.by.frequency.bottom.3 # check what is inside the object again.
target.by.frequency.bottom.3 <- names(target.by.frequency.bottom.3) # extract the names of the elements and re-write the object
target.by.frequency.bottom.3 # check what is inside the object again.
target.by.frequency <- table(d$target)
target.by.frequency <- table(d$target)
source.by.frequency <- table(d$source)
target.by.frequency <- table(d$target)
source.by.frequency <- table(d$source)
target.by.frequency.top.5 <- names(sort(target.by.frequency, decreasing = TRUE)[1:5])
source.by.frequency.top.5 <- names(sort(target.by.frequency, decreasing = TRUE)[1:5])
target.by.frequency <- table(d$target)
source.by.frequency <- table(d$source)
target.by.frequency.top.5 <- names(sort(target.by.frequency, decreasing = TRUE)[1:5])
source.by.frequency.top.5 <- names(sort(target.by.frequency, decreasing = TRUE)[1:5])
print(target.by.frequency.top.5)
print(source.by.frequency.top.5)
target.by.frequency <- table(d$target)
source.by.frequency <- table(d$source)
target.by.frequency.top.5 <- names(sort(target.by.frequency, decreasing = TRUE)[1:5])
source.by.frequency.top.5 <- names(sort(target.by.frequency, decreasing = TRUE)[1:5])
print(target.by.frequency.top.5)
target.by.frequency <- table(d$target)
source.by.frequency <- table(d$source)
target.by.frequency.top.5 <- names(sort(target.by.frequency, decreasing = TRUE)[1:5])
source.by.frequency.top.5 <- names(sort(target.by.frequency, decreasing = TRUE)[1:5])
print(target.by.frequency.top.5)
print(source.by.frequency.top.5)
#Top-5 source territories
source.by.frequency <- table(d$source)
source.by.frequency.top.5 <- names(sort(target.by.frequency, decreasing = TRUE)[1:5])
print(source.by.frequency.top.5)
#Top-5 target territories
target.by.frequency <- table(d$target)
target.by.frequency.top.5 <- names(sort(target.by.frequency, decreasing = TRUE)[1:5])
print(target.by.frequency.top.5)
# put your answer here
table(d$method, d$attack_on)
# Use table() to check the success of cyberattacks against different targets
table(d$success, d$attack_on)
# Create a data frame with the provided table
data <- data.frame(
Target = rep(c("Government", "Military", "Private"), each = 4),
Method = rep(c("DDoS", "Defacement", "Infiltration", "Intrusion"), times = 3),
Count = c(24, 20, 18, 70, 6, 1, 18, 24, 16, 7, 12, 50)
)
# Load the dplyr library for data manipulation
library(dplyr)
# Find the most common method used against different target types
most_common_by_target <- data %>%
group_by(Target) %>%
filter(Count == max(Count))
# Create a data frame with the provided table
data <- data.frame(
Target = rep(c("Government", "Military", "Private"), each = 4),
Method = rep(c("DDoS", "Defacement", "Infiltration", "Intrusion"), times = 3),
Count = c(24, 20, 18, 70, 6, 1, 18, 24, 16, 7, 12, 50)
)
# Load the dplyr library for data manipulation
library(dplyr)
# Find the most common method used against different target types
most_common_by_target <- data %>%
group_by(Target) %>%
filter(Count == max(Count))
# Find the most common cyber method overall
most_common_overall <- data %>%
filter(Count == max(Count))
# Print the results
print("Most common method by target:")
print(most_common_by_target)
print("Most common cyber method overall:")
print(most_common_overall)
# Load the dplyr library for data manipulation
library(dplyr)
# Create a data frame with the provided table
data <- data.frame(
Target = rep(c("Government", "Military", "Private"), each = 4),
Method = rep(c("DDoS", "Defacement", "Infiltration", "Intrusion"), times = 3),
Count = c(24, 20, 18, 70, 6, 1, 18, 24, 16, 7, 12, 50)
)
# Load the dplyr library for data manipulation
library(dplyr)
# Create a data frame with the provided table
data <- data.frame(
Target = rep(c("Government", "Military", "Private"), each = 4),
Method = rep(c("DDoS", "Defacement", "Infiltration", "Intrusion"), times = 3),
Count = c(24, 20, 18, 70, 6, 1, 18, 24, 16, 7, 12, 50)
)
# Find the most common method used against different target types
most_common_by_target <- data %>%
group_by(Target) %>%
filter(Count == max(Count))
# Find the most common cyber method overall
most_common_overall <- data %>%
filter(Count == max(Count))
# Print the results
print("Most common method by target:")
print(most_common_by_target)
print("Most common cyber method overall:")
print(most_common_overall)
# Print the results
print(most_common_by_target)
print(most_common_overall)
# Print the results
print(most_common_by_target)
data <- data %>%
group_by(Target) %>%
mutate(SuccessRate = (Count / sum(Count)) * 100)
print(data)
success_data <- data.frame(
Method = data$Method,
Target = data$Target,
Success = c(1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1)  # Replace with actual success values (1 for success, 0 for failure)
)
ratio_of_success <- success_data %>%
group_by(Method) %>%
summarise(SuccessRatio = mean(Success))
print(ratio_of_success)
success_data <- data.frame(
Method = data$Method,
Target = data$Target,
Success = c(1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1)  # Replace with actual success values (1 for success, 0 for failure)
)
# Calculate the ratio of successful attacks for each method
ratio_of_success <- success_data %>%
group_by(Method) %>%
summarise(SuccessRatio = mean(Success))
# Print the ratio of successful attacks for each method
print(ratio_of_success)
